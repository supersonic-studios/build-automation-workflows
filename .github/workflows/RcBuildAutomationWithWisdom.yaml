name: Unity Build Automation for RC Branches

on:
  workflow_call:
    secrets:
      UNITY_API_TOKEN:
        required: true
      IOS_CREDENTIAL_ID:
        required: false
      ANDROID_CREDENTIAL_ID:
        required: false
      GOOGLE_PLAY_JSON_BASE64:
        required: false
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD:
        required: false
      APPLE_ID:
        required: false

env:
  UNITY_API_BASE_URL: https://build-api.cloud.unity3d.com/api/v1
  UNITY_API_TOKEN: ${{ secrets.UNITY_API_TOKEN }}
  ORG_ID: ${{ vars.UNITY_ORG_ID }}
  PROJECT_ID: ${{ vars.UNITY_PRODUCT_ID }}
  BUNDLE_ID: ${{ vars.BUNDLE_ID }}
  ANDROID_SDK_VERSION: ${{ vars.ANDROID_SDK_VERSION }}
  UGS_ENVIRONMENT: ${{ vars.CUSTOM_ENVIRONMENTS }}
  SW_UGS_TRACK: ${{ vars.SW_UGS_TRACK }}
  X_CODE_VERSION: ${{ vars.X_CODE_VERSION }}
  VERSION_CODE: ${{ vars.VERSION_CODE }}
  VERSION_NAME: ${{ vars.VERSION_NAME }}
  UPLOAD_TO_STORE: ${{ vars.UPLOAD_TO_STORE }}
  TEAM_ID: ${{ vars.TEAM_ID }}

jobs:
  setup-unity-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Up Unity Build Targets and Groups
        env:
          IOS_CREDENTIAL_ID: ${{ secrets.IOS_CREDENTIAL_ID }}
          ANDROID_CREDENTIAL_ID: ${{ secrets.ANDROID_CREDENTIAL_ID }}
          GOOGLE_PLAY_JSON_BASE64: ${{ secrets.GOOGLE_PLAY_JSON_BASE64 }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
        
        run: |
          set -e

          # Extract branch name either from the input (if provided) or the pushed branch
          if [[ "${{ github.event.inputs.branch_name }}" != "" ]]; then
            BRANCH_NAME="${{ github.event.inputs.branch_name }}"
            echo "Custom branch provided via manual dispatch: $BRANCH_NAME"
          else
            BRANCH_NAME=${{ github.ref_name }}
            echo "Default branch triggered via event: $BRANCH_NAME"
          fi

          echo "Sanitizing Original Branch Name: $BRANCH_NAME"
          SANITIZED_BRANCH_NAME=$(echo "${BRANCH_NAME}" | sed -E 's/[^a-zA-Z0-9_-]+/_/g; s/^_+|_+$//g')

          echo "Sanitized Build Target Name: ${SANITIZED_BRANCH_NAME}"

          # Optional: Set Android SDK Version (default if not provided)
          if [ -z "$ANDROID_SDK_VERSION" ]; then
            ANDROID_SDK_VERSION="android_sdk_34"
            echo "ANDROID_SDK_VERSION not set in vars. Using default value: $ANDROID_SDK_VERSION"
          else
            echo "ANDROID_SDK_VERSION provided: $ANDROID_SDK_VERSION"
          fi
          
          if [ -z "$X_CODE_VERSION" ]; then
            X_CODE_VERSION="xcode16_1_0"
            echo "X_CODE_VERSION not set in vars. Using default value: $X_CODE_VERSION"
          else
            echo "X_CODE_VERSION provided: $X_CODE_VERSION"
          fi
          
          # Constants for Unity Cloud Build
          OPERATING_SYSTEM_SELECTED="mac"
          OPERATING_SYSTEM_VERSION="sonomaSilicon"
          MACHINE_TYPE="orka_premium_v1"
          ARCHITECTURE="AppleSilicon"

          # Define the default environments
          ENVIRONMENTS=("development" "staging" "production")
          
          # Add multiple custom environments if provided via CUSTOM_ENVIRONMENTS
          CUSTOM_ENVIRONMENTS_LIST=()
          CUSTOM_TRACKS_ARRAY=($(echo "$SW_UGS_TRACK")) # Convert SW_UGS_TRACK into an array

          if [[ -n "${CUSTOM_ENVIRONMENTS}" ]]; then
            echo "Custom environments found: ${CUSTOM_ENVIRONMENTS}"
            CUSTOM_ENV_ARRAY=$(echo "${CUSTOM_ENVIRONMENTS}" | jq -c '.[]')
            for ENV in $CUSTOM_ENV_ARRAY; do
              CUSTOM_ENV_NAME=$(echo "$ENV" | jq -r '.name')
              CUSTOM_ENVIRONMENTS_LIST+=("${CUSTOM_ENV_NAME}")
              ENVIRONMENTS+=("${CUSTOM_ENV_NAME}")
            done
          else
            echo "No custom environments defined. Proceeding with defaults..."
          fi
          
          for ENV in "${ENVIRONMENTS[@]}"; do
            echo "Creating build targets for environment: $ENV"

            # Determine environment-specific variables
            BUILD_APP_BUNDLE=false
            if [[ "$ENV" == "production" ]]; then
              AUTO_BUILD=false
              AUTO_CANCEL=false
              BUILD_OPTIONS="[]"
              SCRIPTING_DEFINE_SYMBOLS="UGS_PRODUCTION"
              BUILD_APP_BUNDLE=true
              ANDROID_PLAY_STORE_TRACK="production"
            elif [[ "$ENV" == "development" ]]; then
              AUTO_BUILD=false
              AUTO_CANCEL=false
              BUILD_OPTIONS="[\"Development\"]"
              SCRIPTING_DEFINE_SYMBOLS="UGS_DEVELOPMENT"
              ANDROID_PLAY_STORE_TRACK="internal"
            elif [[ "$ENV" == "staging" ]]; then
              AUTO_BUILD=true
              AUTO_CANCEL=true
              BUILD_OPTIONS="[]"
              SCRIPTING_DEFINE_SYMBOLS="UGS_STAGING"
              ANDROID_PLAY_STORE_TRACK="alpha"
            elif [[ " ${CUSTOM_ENVIRONMENTS_LIST[*]} " == *" $ENV "* ]]; then
              INDEX=$(echo "${CUSTOM_ENVIRONMENTS_LIST[@]}" | tr ' ' '\n' | grep -n "^$ENV$" | cut -d: -f1)
              if [[ -n "$INDEX" ]]; then
                AUTO_BUILD=true
                AUTO_CANCEL=false
                BUILD_OPTIONS="[]"
                BUILD_APP_BUNDLE=false
                SCRIPTING_DEFINE_SYMBOLS="UGS_CUSTOM_${ENV}" # Fallback symbol for custom environment
                ANDROID_PLAY_STORE_TRACK=${CUSTOM_TRACKS_ARRAY[$((INDEX - 1))]:-"internal"} # Extract custom track or fallback to "internal"
              fi
            else
              echo "Unknown environment: $ENV"
              continue
            fi

            echo "Script Define Symbols for ${ENV}: $SCRIPTING_DEFINE_SYMBOLS"
            echo "Build App Bundles: ${BUILD_APP_BUNDLE}"
            echo "Android Play Store Track for ${ENV}: ${ANDROID_PLAY_STORE_TRACK}"
          
            # -------- 1. Create Android Build Target --------
            if [[ -n "$ANDROID_CREDENTIAL_ID" ]]; then
              echo "Creating Android Build Target..."
              ANDROID_RESPONSE=$(curl -s -X POST "$UNITY_API_BASE_URL/orgs/$ORG_ID/projects/$PROJECT_ID/buildtargets" \
                -H "Authorization: Bearer $UNITY_API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"name\": \"${ENV}-android-${SANITIZED_BRANCH_NAME}\",
                  \"platform\": \"android\",
                  \"enabled\": true,
                  \"settings\": {
                    \"autoBuild\": $AUTO_BUILD,
                    \"operatingSystemSelected\": \"$OPERATING_SYSTEM_SELECTED\",
                    \"operatingSystemVersion\": \"$OPERATING_SYSTEM_VERSION\",
                    \"machineTypeLabel\": \"$MACHINE_TYPE\",
                    \"autoBuildCancellation\": $AUTO_CANCEL,
                    \"architecture\": \"$ARCHITECTURE\",
                    \"autoDetectUnityVersion\": true,
                    \"fallbackPatchVersion\": true,
                    \"scm\": {
                      \"type\": \"git\",
                      \"branch\": \"${BRANCH_NAME}\"
                    },
                    \"platform\": {
                      \"bundleId\": \"$BUNDLE_ID\"
                    },
                    \"advanced\": {
                      \"unity\": {
                        \"scriptingDefineSymbols\": \"${SCRIPTING_DEFINE_SYMBOLS}\",
                        \"playerExporter\": {
                          \"buildOptions\": ${BUILD_OPTIONS}
                        },
                        \"preBuildScript\": \"BuildScripts/pre_script_publish.sh\",
                        \"postBuildScript\": \"BuildScripts/post_build_script.sh\"
                      },
                      \"android\": {
                        \"androidSDKVersion\": \"$ANDROID_SDK_VERSION\",
                        \"buildAppBundle\": ${BUILD_APP_BUNDLE}
                      }
                    }
                  },
                  \"credentials\": {
                    \"signing\": {
                      \"credentialid\": \"$ANDROID_CREDENTIAL_ID\"
                    }
                  }
                }")

              echo "Android Build Target Response:"
              echo "$ANDROID_RESPONSE" | jq .

              ANDROID_BUILD_TARGET_ID=$(echo "$ANDROID_RESPONSE" | jq -r '.buildtargetid')
              if [[ "$ANDROID_BUILD_TARGET_ID" != "null" && -n "$ANDROID_BUILD_TARGET_ID" ]]; then
                echo "Android Build Target Created: $ANDROID_BUILD_TARGET_ID"

                # Add environment variables using the correct format
                curl -s -X PUT "$UNITY_API_BASE_URL/orgs/$ORG_ID/projects/$PROJECT_ID/buildtargets/$ANDROID_BUILD_TARGET_ID/envvars" \
                -H "Authorization: Bearer $UNITY_API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"envvars\": {
                    \"VERSION_CODE\": \"${VERSION_CODE}\",
                    \"GOOGLE_PLAY_JSON_BASE64\": \"${GOOGLE_PLAY_JSON_BASE64}\",
                    \"UPLOAD_TO_STORE\": \"${UPLOAD_TO_STORE}\",
                    \"ANDROID_PLAY_STORE_TRACK\": \"${ANDROID_PLAY_STORE_TRACK}\"
                  }
                }"
              else
                echo "Failed to create Android Build Target. Response: $ANDROID_RESPONSE"
                continue
              fi
            else
              echo "Skipping Android Build Target creation: Missing credentials."
            fi

            # -------- 2. Create iOS Build Target --------
            if [[ -n "$IOS_CREDENTIAL_ID" ]]; then
              echo "Creating iOS Build Target..."
              IOS_RESPONSE=$(curl -s -X POST "$UNITY_API_BASE_URL/orgs/$ORG_ID/projects/$PROJECT_ID/buildtargets" \
                -H "Authorization: Bearer $UNITY_API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"name\": \"${ENV}-ios-${SANITIZED_BRANCH_NAME}\",
                  \"platform\": \"ios\",
                  \"enabled\": true,
                  \"settings\": {
                    \"autoBuild\": $AUTO_BUILD,
                    \"operatingSystemSelected\": \"$OPERATING_SYSTEM_SELECTED\",
                    \"operatingSystemVersion\": \"$OPERATING_SYSTEM_VERSION\",
                    \"machineTypeLabel\": \"$MACHINE_TYPE\",
                    \"autoBuildCancellation\": $AUTO_CANCEL,
                    \"architecture\": \"$ARCHITECTURE\",
                    \"autoDetectUnityVersion\": true,
                    \"fallbackPatchVersion\": true,
                    \"scm\": {
                      \"type\": \"git\",
                      \"branch\": \"${BRANCH_NAME}\"
                    },
                    \"platform\": {
                      \"bundleId\": \"$BUNDLE_ID\",
                      \"xcodeVersion\": \"$X_CODE_VERSION\"
                    },
                    \"advanced\": {
                      \"unity\": {
                        \"scriptingDefineSymbols\": \"${SCRIPTING_DEFINE_SYMBOLS}\",
                        \"playerExporter\": {
                          \"buildOptions\": ${BUILD_OPTIONS}
                        },
                        \"preBuildScript\": \"BuildScripts/pre_script_publish.sh\",
                        \"postBuildScript\": \"BuildScripts/post_build_script.sh\"
                      },
                      \"xcode\": {
                        \"customFastlaneConfigPath\": \"fastlane/ucb_xcode_fastlane.json\",
                        \"uploadXCArchive\": true
                      }
                    }
                  },
                  \"credentials\": {
                    \"signing\": {
                      \"credentialid\": \"$IOS_CREDENTIAL_ID\"
                    }
                  }
                }")

              echo "iOS Build Target Response:"
              echo "$IOS_RESPONSE" | jq .

              IOS_BUILD_TARGET_ID=$(echo "$IOS_RESPONSE" | jq -r '.buildtargetid')
              if [[ "$IOS_BUILD_TARGET_ID" != "null" && -n "$IOS_BUILD_TARGET_ID" ]]; then
                echo "iOS Build Target Created: $IOS_BUILD_TARGET_ID"

                # Add environment variables using the correct format
                curl -s -X PUT "$UNITY_API_BASE_URL/orgs/$ORG_ID/projects/$PROJECT_ID/buildtargets/$IOS_BUILD_TARGET_ID/envvars" \
                -H "Authorization: Bearer $UNITY_API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"envvars\": {
                    \"VERSION_NAME\": \"${VERSION_NAME}\",
                    \"TEAM_ID\": \"${TEAM_ID}\",
                    \"FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\": \"${FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD}\",
                    \"APPLE_ID\": \"${APPLE_ID}\",
                    \"UPLOAD_TO_STORE\": \"${UPLOAD_TO_STORE}\"
                  }
                }"
              else
                echo "Failed to create iOS Build Target. Response: $IOS_RESPONSE"
                continue
              fi
            else
              echo "Skipping iOS Build Target creation: Missing credentials."
            fi

            # -------- 3. Create Build Group --------
            if [[ -n "$ANDROID_BUILD_TARGET_ID" || -n "$IOS_BUILD_TARGET_ID" ]]; then
              echo "Creating Build Group for environment: $ENV"
              BUILD_GROUP_RESPONSE=$(curl -s -X POST "$UNITY_API_BASE_URL/orgs/$ORG_ID/projects/$PROJECT_ID/buildTargetGroups" \
              -H "Authorization: Bearer $UNITY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"${ENV}-group-${SANITIZED_BRANCH_NAME}\",
                \"description\": \"${BRANCH_NAME} Build group for ${ENV}\",
                \"buildTargetIds\": [\"${ANDROID_BUILD_TARGET_ID}\", \"${IOS_BUILD_TARGET_ID}\"]
              }")

              echo "Build Group Response:"
              echo "$BUILD_GROUP_RESPONSE" | jq .
            else
              echo "Skipping Build Group creation: No valid build targets created for $ENV."
            fi
          done

          echo "All environments processed successfully!"
